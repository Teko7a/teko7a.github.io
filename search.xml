<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cf793</title>
      <link href="//cf/793/"/>
      <url>//cf/793/</url>
      
        <content type="html"><![CDATA[<div class="info"><blockquote><p>啊不是，这断层也太恐怖了吧！</p></blockquote></div><p><ahref="https://codeforces.com/contest/1682">https://codeforces.com/contest/1682</a></p><h1 id="a.-palindromic-indices">A. Palindromic Indices</h1><h2 id="题意">题意</h2><p>给定一个 <strong>回文</strong> 串 <spanclass="math inline">\(s\)</span>，删去一个字符之后其依然回文的删法有多少种？</p><h2 id="解答">解答</h2><p>因为初始回文，只需考虑中心扩展的方法。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> mid <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> l <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    l <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>mid <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="b.-and-sorting">B. AND Sorting</h1><h2 id="题意-1">题意</h2><p>给定一个 <span class="math inline">\(0 \sim n - 1\)</span>的排列，初始时 <strong>一定</strong>是无序的。给出下述排序方法，问其中的 <spanclass="math inline">\(X\)</span> 最大是多少：</p><ol type="1"><li>选择两个数，记为 <span class="math inline">\(p_i, p_j\)</span> 满足<span class="math inline">\(p_i \&amp; p_j = X\)</span>。</li><li>交换他们。</li></ol><h2 id="解答-1">解答</h2><p>只需要考虑那些未排序好的位置。与运算必然不会得到比原先更大的数，因此<span class="math inline">\(X \in [0, n)\)</span>。将这些位置上的数按位与起来就是答案。</p><div class="info"><blockquote><p>证明也十分简单：考虑 <span class="math inline">\(p_i \&amp; p_j =X\)</span> 时交换策略：<span class="math inline">\(\mathrm{swap}(p_i, X)\rightarrow \mathrm{swap}(p_i, p_j) \rightarrow \mathrm{swap}(p_j,X)\)</span>。</p></blockquote></div><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> p <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      p <span class="token operator">&amp;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="c.-lis-or-reverse-lis">C. LIS or Reverse LIS?</h1><h2 id="题意-2">题意</h2><p>给定序列 <spanclass="math inline">\(\{S\}\)</span>，你可以随意安排其顺序，问最大的<span class="math inline">\(\min(\mathrm{LIS},\mathrm{LIS}_{rev})\)</span> 是多少？</p><p>其中 <span class="math inline">\(\rm LIS\)</span> 指的是<strong>最长严格上升子序列长度</strong>，而 <spanclass="math inline">\(\mathrm{LIS}_{\_rev}\)</span> 指其反序列。</p><h2 id="解答-2">解答</h2><p>我们熟知 <span class="math inline">\(\mathrm {LIS}_{rev} =\mathrm{LDS}\)</span> —— 最长严格下降子序列长度。</p><p>本题要求 <strong>严格</strong>，因而出现次数超过 <spanclass="math inline">\(1\)</span> 次的都可当作出现了 <spanclass="math inline">\(2\)</span> 次。我们希望更多的数能够同时出现在<span class="math inline">\(\rm LIS\)</span> 与 <spanclass="math inline">\(\rm LDS\)</span> 中，这些点当然是在原序列中出现<strong>多次</strong> 的那些数，记为 <spanclass="math inline">\(x\)</span> 个。</p><p>剩下的那些仅出现一次的元素只能平均分配到 <spanclass="math inline">\(\rm LIS\)</span> 与 <spanclass="math inline">\(\rm LDS\)</span> 中了，记为 <spanclass="math inline">\(y\)</span> 个。特别注意当 <spanclass="math inline">\(y\)</span>为奇数时，最大值可以同时贡献到两个序列中于是最终贡献为 <spanclass="math inline">\(\Big\lceil \dfrac{y}{2} \Big\rceil +x\)</span>。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> custom_hash<span class="token operator">></span> mp<span class="token punctuation">;</span>  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cnt <span class="token operator">+=</span> v <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span> cnt <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> mp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token operator">--</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="d.-circular-spanning-tree">D. Circular Spanning Tree</h1><h2 id="题意-3">题意</h2><p>环上有 <span class="math inline">\(n\)</span> 个点，顺时针分别为<span class="math inline">\(1, 2, \cdots, n\)</span>，给定一个序列 <spanclass="math inline">\(s\)</span>。</p><p>要求将这 <span class="math inline">\(n\)</span> 个点连为一棵树，且<span class="math inline">\(\delta_i \equiv s_i \pmod2\)</span>。同时要求 <strong>这些边</strong> 除端点外不能有交。</p><figure><img src="/images/cf/cf793d.png" title="前者不合法，而后者可行"alt="如图所示" /><figcaption aria-hidden="true">如图所示</figcaption></figure><div class="danger"><blockquote><p><span class="math inline">\(n \in [2, 2 \times 10 ^ 5]\)</span></p></blockquote></div><h2 id="解答-3">解答</h2><div class="warning"><blockquote><p>我趣，这题写了好久啊 😭。赛后看各位大神的代码发现自己写的好复杂。</p></blockquote></div><p>因为 <span class="math inline">\(n \ge2\)</span>，所以这棵树一定有超过两个叶子节点，它们的度均为奇数，即 <spanclass="math inline">\(\displaystyle \sum_{i = 1} ^ n s_i \gt0\)</span>。</p><div class="info"><blockquote><p>注意到 <span class="math inline">\(n = 1\)</span>时则不需要此限制。</p></blockquote></div><p>另一限制为 <span class="math inline">\(\displaystyle\sum_{i = 1}^ns_i \equiv 0 \pmod 2\)</span>，这是因为 <spanclass="math inline">\(s_i\)</span>限制的是某节点的度之奇偶，而一棵树的入度与出度显然是一样的。</p><p>接下来的构造十分容易，我们只需要将所有的 <spanclass="math inline">\(00\cdots001\)</span> 连成 <spanclass="math inline">\(\langle\leftarrow 0 - 0 - \cdots - 0 - 0 -1\rangle\)</span> 随后再将所有的 <span class="math inline">\(\leftarrow0\)</span> 连起来就可以了。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> o <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>o <span class="token operator">||</span> o <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">,</span> chain<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nxt <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>        pos <span class="token operator">=</span> nxt<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      chain<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> chain<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>chain<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> chain<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> e<span class="token punctuation">]</span> <span class="token operator">:</span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> e <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="e.-unordered-swaps">E. Unordered Swaps</h1><h2 id="题意-4">题意</h2><p>&lt;++&gt;</p><h2 id="解答-4">解答</h2><p>懒得写了。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>    <span class="token operator">--</span>i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">auto</span> g <span class="token operator">=</span> <span class="token generic-function"><span class="token function">multivector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> id<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>    <span class="token operator">--</span>u<span class="token punctuation">,</span> <span class="token operator">--</span>v<span class="token punctuation">;</span>    g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    id<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>u<span class="token punctuation">,</span> v<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">,</span> u<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ord</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>ord<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> i<span class="token punctuation">;</span> ord<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ord<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token operator">++</span><span class="token punctuation">;</span>      a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MOD</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> k</span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">MOD</span><span class="token punctuation">(</span>ord<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ord<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">MOD</span><span class="token punctuation">(</span>ord<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> ord<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cur</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">auto</span> check <span class="token operator">=</span> <span class="token function">y_combinator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> check<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> id<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">check</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcalO(&lt;++&gt;)\)</span></p></blockquote><h1 id="f.-mcmf">F. MCMF?</h1><h2 id="题意-5">题意</h2><p>&lt;++&gt;</p><h2 id="解答-5">解答</h2><p>贪心。</p><details><summary>展开代码</summary><p>&lt;++&gt;</p></details><blockquote><p>复杂度： <span class="math inline">\(\mathcalO(&lt;++&gt;)\)</span></p></blockquote><blockquote><p>Bonus: &lt;++&gt;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> constructive </tag>
            
            <tag> bitwise </tag>
            
            <tag> palindrome </tag>
            
            <tag> lis </tag>
            
            <tag> flow </tag>
            
            <tag> mcmf </tag>
            
            <tag> topo-sort </tag>
            
            <tag> fenwick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf702</title>
      <link href="//cf/702/"/>
      <url>//cf/702/</url>
      
        <content type="html"><![CDATA[<div class="primary"><blockquote><p>这场比较简单，但通过本场我学到了笛卡尔树。 qwq</p></blockquote></div><p><ahref="https://codeforces.com/contest/1490">https://codeforces.com/contest/1490</a></p><h1 id="a.-dense-array">A. Dense Array</h1><h2 id="题意">题意</h2><p>希望对于任两相邻元素都有：</p><p><span class="math display">\[\dfrac{\max}{\min} \le 2\]</span></p><p>在给定的数组中 <strong>插入</strong> 最少的数以满足上述条件。</p><div class="danger"><blockquote><p><span class="math inline">\(n, a_i \le 50\)</span></p></blockquote></div><h2 id="解答">解答</h2><p>数据量非常小，直接模拟即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> M <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>M <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      m <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>      cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n + \logn)\)</span></p></blockquote><div class="gray"><blockquote><p><span class="math inline">\(\log{\dfrac{a_2}{a_1}} +\log{\dfrac{a_3}{a_2}} + \log{\dfrac{a_4}{a_3}} + \cdots +\log{\dfrac{a_n}{a_{n - 1}}} = \log{\dfrac{a_n}{a_1}} \sim\log{n}\)</span></p></blockquote></div><h1 id="b.-balanced-remainders">B. Balanced Remainders</h1><h2 id="题意-1">题意</h2><p>给定 <span class="math inline">\(n\)</span> （其中 <spanclass="math inline">\(3 \mid n\)</span>）个数，记操作为选择一个数并使其自增 <spanclass="math inline">\(1\)</span>，问使得模 <spanclass="math inline">\(3\)</span> 意义下 <spanclass="math inline">\(cnt_0 = cnt_1 = cnt_2\)</span>的最小操作次数。</p><h2 id="解答-1">解答</h2><p>易知最终的 <span class="math inline">\(cnt_x =\dfrac{n}{3}\)</span>，加一将使得 <span class="math inline">\(0\rightarrow 1 \rightarrow 2 \rightarrow0\)</span>，直接贪心地操作其中的最大值即可。</p><div class="gray"><blockquote><p>证明：只需说明这样操作不会比操作非最大值的代价更劣，而这一点显然。</p></blockquote></div><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span> cnt<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    cnt<span class="token punctuation">[</span>x <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> m <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">-=</span> m<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ans <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> M <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      b <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      c <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><div class="gray"><blockquote><p>注意到最坏情况下，此循环会执行 <span class="math inline">\(n\)</span>次，构造 <span class="math inline">\(\langle\underbrace{2, 2,\cdots,2}_{length\; is\; n}\rangle\)</span>。</p><p>使用势能分析的思想，每个元素的变化尺度可以从初末态直接得出，即 <spanclass="math inline">\(n\)</span>。</p></blockquote></div><h1 id="c.-sum-of-cubes">C. Sum of Cubes</h1><h2 id="题意-2">题意</h2><p>是否有一种分解，使得给定的 <span class="math inline">\(n = a^3 +b^3\)</span> ?</p><div class="danger"><blockquote><p><span class="math inline">\(x \le 10^{12}\)</span></p></blockquote></div><h2 id="解答-2">解答</h2><p>此即 <a href="https://leetcode.com/problems/two-sum/"title="非常简单，欢迎爆切">leetcode 第一题：两数之和</a>，使用哈希表存下<span class="math inline">\(\le 10 ^ 4\)</span>的立方数，随后枚举查询哈希表中 <span class="math inline">\(n -x^3\)</span> 是否存在即可解决本题。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>i64<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> custom_hash<span class="token operator">></span> mp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  mp<span class="token punctuation">[</span><span class="token number">1LL</span> <span class="token operator">*</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> tt<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> tt<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>tt<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i64 n<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i64 cur <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">*</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>n <span class="token operator">-</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n + {}^3\sqrt{10 ^{12}})\)</span></p></blockquote><h1 id="d.-permutation-transformation">D. PermutationTransformation</h1><h2 id="题意-3">题意</h2><p>某二叉树任意子树根节点权值比其他节点权值都大（堆）。</p><p>根据给定<strong>排列</strong>构造该树，设该数的根对应序列中 <spanclass="math inline">\(x\)</span> 的位置。要求满足上述要求的情况下 <spanclass="math inline">\(x\)</span> 的左子树包含 <spanclass="math inline">\(x\)</span>左区间中所有数，右子树包含右区间中的所有数（二叉搜索树）。</p><p>输出序列中每一个数对应节点的深度。</p><h2 id="解答-1-1">解答 1</h2><p>一个朴素的想法是，直接<code>DFS</code>，我们只需要找出区间最大值，将其作为根即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tree</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">y_combinator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> dfs<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max_element</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n ^ 2)\)</span></p></blockquote><div class="info"><blockquote><p>使用 <code>ST</code> / <code>Segment tree</code>等技巧寻找最值这一步，可以优化至 <span class="math inline">\(\mathcal O(n \log n)\)</span></p></blockquote></div><h2 id="解答-2-1">解答 2</h2><p>注意到此定义即「笛卡尔」 树（Cartesian tree）。</p><p>于是套用一下单调栈线性建树的模板，再 <code>DFS</code> 即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> id<span class="token punctuation">,</span> val<span class="token punctuation">,</span> p<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> _id<span class="token punctuation">,</span> <span class="token keyword">int</span> _val<span class="token punctuation">,</span> <span class="token keyword">int</span> _p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    id <span class="token operator">=</span> _id<span class="token punctuation">,</span> val <span class="token operator">=</span> _val<span class="token punctuation">,</span> p <span class="token operator">=</span> _p<span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Cmp</span><span class="token operator">></span><span class="token keyword">int</span> <span class="token function">cartesian_build</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> <span class="token operator">&amp;</span>tree<span class="token punctuation">,</span>    <span class="token keyword">const</span> Cmp <span class="token operator">&amp;&amp;</span>cmp <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">less</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      k <span class="token operator">=</span> tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p <span class="token operator">=</span> k<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>p <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> <span class="token function">tree</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token function">cartesian_build</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">d</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">y_combinator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> dfs<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        d<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" \n"</span><span class="token punctuation">[</span>i <span class="token operator">==</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="e.-accidental-victory">E. Accidental Victory</h1><h2 id="题意-4">题意</h2><p><span class="math inline">\(n\)</span>人比赛，每位选手都有一些游戏币。在 <span class="math inline">\(n -1\)</span> 场 <span class="math inline">\(1V1\)</span>比赛中，拥有游戏币更多的选手取胜，并获得输家的全部游戏币。特殊的，如果两种拥有相同的游戏币，那么取胜看天（随机决出胜者）。</p><p>问可能有多少选手成为最终的赢家？</p><div class="gray"><blockquote><p>注意，原题面中并非「游戏币」，而是<code>tokens</code>。真不知道咋翻译比较合适，于是就取「代币」 之意了。</p></blockquote></div><h2 id="解答-3">解答</h2><p>考虑 <span class="math inline">\(x\)</span>将会成为最终的赢家，并先逐个击破比他小的选手，随后向右拓展，只要能够赢下最后一个人就能够成为赢家。特殊的，如果当前拥有的游戏币与对手相同，我们都视作<span class="math inline">\(x\)</span> 会赢（这样的假设是必要的）。</p><p>注意到如果 <span class="math inline">\(x\)</span>能成为赢家，那么使用此策略 <span class="math inline">\(x + 1\)</span>也能成为赢家（要保证这一点始终成立，需要提前排序）。此即二分答案基本问题。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>i64<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i64 cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cur <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      r <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n \logn)\)</span></p></blockquote><div class="info"><blockquote><p>Bonus: 其实要获得答案无需二分，从后往前遍历，比较前缀和与 <spanclass="math inline">\(x\)</span> 的相对大小也可直接得出哪些可行。</p></blockquote><blockquote><p>复杂度上没有太大的影响。</p></blockquote></div><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans <span class="token punctuation">&#123;</span> a<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prefixSum<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  index <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span></code></pre></details><h1 id="f.-equalize-the-array">F. Equalize the Array</h1><h2 id="题意-5">题意</h2><p>在给定的数组中删去至少几个元素，能使得剩下的元素都出现 <spanclass="math inline">\(x\)</span> 次？</p><h2 id="解答-4">解答</h2><p>不妨考虑最终最多剩下几个元素，答案就是 <span class="math inline">\(n-\)</span> 剩下的。</p><p>统计每个元素出现次数，并对次数降序排序，随后求解最大子矩形。需要指出的是，在有序数组上做最大子矩形是容易的。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> custom_hash<span class="token operator">></span> mp<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n \logn)\)</span></p></blockquote><h1 id="g.-old-floppy-drive">G. Old Floppy Drive</h1><h2 id="题意-6">题意</h2><p>给定一个循环数组（周期为 <spanclass="math inline">\(n\)</span>），接下来进行 <spanclass="math inline">\(q\)</span> 次询问首个前缀和 <spanclass="math inline">\(\ge x\)</span> 的位置。</p><p>如果不存在这样的位置，输出 <spanclass="math inline">\(-1\)</span>。</p><div class="danger"><blockquote><p><span class="math inline">\(a_i \in [-10 ^ 9, 10 ^9]\)</span>，注意开 <code>long long</code>.</p></blockquote></div><h2 id="解答-5">解答</h2><p>很明显需要二分查找。但注意到有负数，要进行二分，需要保证有序，这该怎么办呢？</p><p>我们可以选择只维护那些前缀和递增的点，同时记下整个数组的和 <spanclass="math inline">\(s\)</span>。</p><blockquote><p><span class="math inline">\(p_{\{-1, 0\}}\)</span> 是 <spanclass="math inline">\(p\)</span> 数组末尾元素的第一维的值。</p></blockquote><p>如果 <span class="math inline">\(s \le 0\)</span>，且询问的 <spanclass="math inline">\(x \gt p_{\{-1, 0\}}\)</span>是无解的，因为在循环几圈之后，前缀和只会变得更小。</p><p>否则 <span class="math inline">\(x \le p_{\{-1,0\}}\)</span>，可以直接 <code>lower_bound</code> 查找这个值。</p><p>另外的情况就是 <span class="math inline">\(s \gt0\)</span>，这种时候需要先减去已经跑了多少圈，即：</p><p><span class="math display">\[\Bigg\lceil \dfrac{x - b}{s} \Bigg\rceil\]</span></p><p>再 <code>lower_bound</code> <span class="math inline">\(x - r \timess\)</span> 得到位置 <span class="math inline">\(pos\)</span>，再加上<span class="math inline">\(r \times n\)</span> 就是最终的答案了。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> q<span class="token punctuation">;</span>  i64 s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>i64<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> p<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    s <span class="token operator">+=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i <span class="token operator">||</span> s <span class="token operator">></span> p<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      p<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i64 x<span class="token punctuation">;</span> q <span class="token operator">--</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" \n"</span><span class="token punctuation">[</span><span class="token operator">!</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    <span class="token keyword">auto</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pair<span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CEIL</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> b</span></span>      i64 r <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token function">CEIL</span><span class="token punctuation">(</span>x <span class="token operator">-</span> b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pair<span class="token punctuation">&#123;</span>x <span class="token operator">-</span> r <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">-></span>second <span class="token operator">+</span> r <span class="token operator">*</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n + q \logn)\)</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> binary search </tag>
            
            <tag> Cartesian tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf701</title>
      <link href="//cf/701/"/>
      <url>//cf/701/</url>
      
        <content type="html"><![CDATA[<p class="note note-secondary">这场在大一某次周赛训练时学长给用过，当时菜的一笔（虽然现在也是），不过看到自己的进步还是很开心的(^O^)。</p><p><ahref="https://codeforces.com/contest/1485">https://codeforces.com/contest/1485</a></p><h1 id="a.-add-and-divide">A. Add and Divide</h1><h2 id="题意">题意</h2><p>给定 <span class="math inline">\(a,b\)</span>，你可对其进行如下两种操作：</p><ul><li><code>a /= b</code> (向下取整)</li><li><code>b += 1</code></li></ul><p>问使得 <span class="math inline">\(a = 0\)</span>的最小操作次数。</p><h2 id="解答">解答</h2><p>注意到第一种操作下降的非常快，<strong>因此一定是先执行第二种操作若干次，再执行第一种操作若干次</strong>。</p><p>同时因为数据范围只有 <span class="math inline">\(2 ^ {30}\)</span>,所以操作次数不会太大。故而枚举第二种操作进行了多少次，再进行模拟即可。</p><details><summary>参考代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1E9</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> i <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> res <span class="token operator">=</span> i<span class="token punctuation">,</span> x <span class="token operator">=</span> a<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">/=</span> b <span class="token operator">+</span> i<span class="token punctuation">;</span>        res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(\log^2a)\)</span></p></blockquote><h1 id="b.-replace-and-keep-sorted">B. Replace and Keep Sorted</h1><h2 id="题意-1">题意</h2><p>给定一个 <strong>递增</strong> 序列 <spanclass="math inline">\(\{a\}\)</span>（元素 <spanclass="math inline">\(\in [1, k]\)</span>，且<strong>互不相同</strong>），并同时定义<strong>长度相同</strong>的序列「<spanclass="math inline">\(k\)</span>-相似」当且仅当仅有一个元素不同、递增、值域在<span class="math inline">\(1 \sim k\)</span>。</p><p>询问 <span class="math inline">\(q\)</span> 次，<spanclass="math inline">\(a[l..r]\)</span> 有多少个与之「<spanclass="math inline">\(k\)</span>-相似」的序列（注意这个新序列无需在<span class="math inline">\(\{a\}\)</span> 中）。</p><h2 id="解答-1">解答</h2><p>元素互异、递增、值域 <span class="math inline">\(1 \sim k\)</span>的限制使得此题的难度大减。</p><p>不妨从值域考虑，对于当前考虑的段 <spanclass="math inline">\(a[l..r]\)</span>：</p><ol type="1"><li>若要用 <span class="math inline">\(&lt; a_l\)</span> 或 <spanclass="math inline">\(&gt; a_r\)</span>的元素替换掉端点满足题意，那么可以有 <span class="math inline">\((a_l -1) + (k - a_r)\)</span> 种方案。</li><li>而如果想要替换掉其中一个 <spanclass="math inline">\(a_i\)</span>，则可以上调或者下调该元素（直到不与其他元素相同），这样的操作有<span class="math inline">\(2 \times [a_r - a_l + 1 - (r - l +1)]\)</span>。</li></ol><p>于是答案为</p><p><span class="math inline">\(\begin{aligned} &amp;a_l - 1 + k - a_r +2a_r - 2a_l + 2 - 2r + 2l - 2 \\=\;&amp; a_r - a_l + k - 2(r - l + 1) +1\end{aligned}\)</span></p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> ans<span class="token punctuation">;</span> q<span class="token operator">--</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> l <span class="token operator">>></span> r<span class="token punctuation">;</span>  l <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  ans <span class="token operator">=</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n + q)\)</span></p></blockquote><h1 id="c.-floor-and-mod">C. Floor and Mod</h1><h2 id="题意-2">题意</h2><p>有多少二元组 <span class="math inline">\(\langle a, b\rangle\)</span> 使得 <span class="math inline">\(\lfloor \dfrac{a}{b}\rfloor = a \bmod b\)</span>，其中 <span class="math inline">\(a \in [1,x], b \in [1, y]\)</span> ?</p><h2 id="解答-2">解答</h2><p>一个经典结论是 <span class="math inline">\(\lfloor \dfrac{a}{b}\rfloor = a \bmod b \le \sqrt x\)</span>。</p><blockquote><p><span class="math inline">\(\mathcal{Proof:\;\;} a \bmod b = a - b\times \lfloor \dfrac{a}{b} \rfloor \Rightarrow \dfrac{a}{b + 1} =\lfloor \dfrac{a}{b} \rfloor \Rightarrow a = k (b + 1)\)</span></p><p><span class="math inline">\(k = a \bmod b \lt b \Rightarrow k^2 \lt k(b + 1) = a \le x \Rightarrow k \le \sqrt x \quad\quad\blacksquare\)</span></p></blockquote><p>于是对于固定的 <spanclass="math inline">\(k\)</span>，我们只需要计算满足下列条件的 <spanclass="math inline">\(b\)</span> 的个数：</p><ol type="1"><li><span class="math inline">\(b \gt k\)</span></li><li><span class="math inline">\(1 \le b \le y\)</span></li><li><span class="math inline">\(1 \le k(b + 1) \le x \Leftrightarrow 1\le b \le x / k - 1\)</span></li></ol><p>因此，答案为 <span class="math inline">\(\max(0, \min(y, x / k - 1) -k)\)</span>。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> std<span class="token double-colon punctuation">::</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ans <span class="token operator">+=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(\sqrt x)\)</span></p></blockquote><h1 id="d.-multiples-and-power-differences">D. Multiples and PowerDifferences</h1><h2 id="题意-3">题意</h2><p>关于矩阵 <span class="math inline">\(\{a\}\)</span> 构造同样大的矩阵<span class="math inline">\(\{b\}\)</span>，使得：</p><ol type="1"><li><span class="math inline">\(a_{i, j} \mid b_{i, j}\)</span></li><li><span class="math inline">\(b_{i, j} \le 10 ^ 6\)</span></li><li>任两相邻 <span class="math inline">\(\left| b_{i, j} - b_{x, y}\right| \le k ^ 4\)</span>，其中 <span class="math inline">\(k \ge1\)</span>。</li></ol><ul><li><span class="math inline">\(a_{i, j} \in [1, 16]\)</span>。</li></ul><h2 id="解答-3">解答</h2><p>注意到 <span class="math inline">\(a_{i, j}\)</span> 很小，但严苛的是<span class="math inline">\(b_{i, j} \le 10 ^6\)</span>，我们要找到一个数，恰好能包含 <span class="math inline">\(1\sim 16\)</span> 的所有数字。容易想到 <spanclass="math inline">\(\mathrm{lcm}\)</span>，我们发现 <spanclass="math inline">\(\mathrm{lcm}{1..16} = 720,720\)</span>。</p><p>于是就有一个简单的构造方案了：交叉分层放置，一层放 <spanclass="math inline">\(720,720\)</span>，一层放 <spanclass="math inline">\(720,720 - a_{i, j}^4\)</span> 即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> X <span class="token operator">=</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  X <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">lcm</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> X <span class="token operator">-</span> <span class="token number">1LL</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> X<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" \n"</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> m<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(nm)\)</span></p></blockquote><h1 id="e.-move-and-swap">E. Move and Swap</h1><h2 id="题意-4">题意</h2><p>给定根节点为 <span class="math inline">\(1\)</span>的树，节点带有点权，且叶子到根的距离均为树高 <spanclass="math inline">\(d\)</span>。</p><p>初始在根上放置两张卡片，一红一蓝（分别称为 <spanclass="math inline">\(a_r, a_b\)</span>）。接下来，你将进行 <spanclass="math inline">\(d\)</span> 次操作，每次操作分三个子步骤：</p><ol type="1"><li>将红卡移动至其所在节点任一子节点。<strong>move(1/2)</strong></li><li>将蓝卡移动至其所在节点下一层的任一节点。<strong>move(2/2)</strong></li><li>（可以跳过此步骤）交换两张卡片。<strong>swap</strong></li></ol><p>这样你可得到 <span class="math inline">\(\left|a_r - a_b\right|\)</span> 分。</p><p>问最多能得到多少分？</p><h2 id="解答-4">解答</h2><p>设 <span class="math inline">\(dp_i\)</span>为执行操作之后，当前位于节点 <span class="math inline">\(i\)</span>所收获的的最大值。由于第三步是可选的，所以先分开讨论：</p><ol type="1"><li>不执行第三步：<span class="math inline">\(dp_i = dp_j + \max(\left|a_i - a_b\right|)\)</span>，其中 <spanclass="math inline">\(a_b\)</span>为蓝卡所在节点的点权。用这一层的俩最值来转移一定最优，于是去掉绝对值就可以改写成<span class="math inline">\(dp_i = dp_{p[i]} + \max(a_i - \min, \max -a_i)\)</span></li><li>执行第三步：假设换位之前红卡位于 <spanclass="math inline">\(j\)</span>，则有： <spanclass="math inline">\(dp_i = \max(dp_i, dp_{p[j]} + \left| a_i - a_j\right|)\)</span>。和上面类似地，<span class="math inline">\(dp_i =\max(dp_{p[j]} + a_j - a_i, dp_{p[j]} - a_j +a_i)\)</span>。这种情况下我们需要得到 <spanclass="math inline">\(dp_{p[j]} \pm a_j\)</span> 的最值。</li></ol><p>这题的输入比较阴间，首先建出图之后用 <code>dfs</code>处理出每个节点的父节点以及其深度，再把深度相同的节点存到一起。且注意到无论何种情况，都需要先知道<span class="math inline">\(p_i\)</span> 的情况，不妨直接从叶子开始<code>dp</code>。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">d</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">auto</span> g <span class="token operator">=</span> <span class="token generic-function"><span class="token function">multivector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> u<span class="token punctuation">;</span>    u <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dep</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">y_combinator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> dfs<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>v <span class="token operator">:</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token operator">*</span>std<span class="token double-colon punctuation">::</span><span class="token function">max_element</span><span class="token punctuation">(</span>dep<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dep<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">auto</span> G <span class="token operator">=</span> <span class="token generic-function"><span class="token function">multivector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    G<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>i64<span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> depth<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">1E18</span></span></span>    i64 m <span class="token operator">=</span> inf<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>    <span class="token keyword">int</span> rm <span class="token operator">=</span> <span class="token number">1E9</span><span class="token punctuation">,</span> rM <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1E9</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>u <span class="token operator">:</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      rm <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>rm<span class="token punctuation">,</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      rM <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>rM<span class="token punctuation">,</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>v <span class="token operator">:</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          m <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          M <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    m <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">min</span><span class="token generic class-name"><span class="token operator">&lt;</span>i64<span class="token operator">></span></span></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> rm<span class="token punctuation">)</span><span class="token punctuation">;</span>    M <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">max</span><span class="token generic class-name"><span class="token operator">&lt;</span>i64<span class="token operator">></span></span></span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> rM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>u <span class="token operator">:</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> m<span class="token punctuation">,</span> M <span class="token operator">-</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>v <span class="token operator">:</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">auto</span> ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> rm<span class="token punctuation">,</span> rM <span class="token operator">-</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="f.-copy-or-prefix-sum">F. Copy or Prefix Sum</h1><h2 id="题意-5">题意</h2><p>给定序列 <span class="math inline">\(\{B\}\)</span>，关于之定义「合法」 的序列 <span class="math inline">\(\{A\}\)</span> 满足：</p><ol type="1"><li><strong>Copy:</strong> <span class="math inline">\(B_i =A_i\)</span></li><li><strong>Prefix Sum</strong> <span class="math inline">\(B_i =\displaystyle\sum_{j=1}^i{\{A_j\}}\)</span></li></ol><p>计算 <span class="math inline">\(\{A\}\)</span> 的个数。</p><ul><li><span class="math inline">\(B_i \in [-10 ^ 9, 10 ^ 9]\)</span></li><li><span class="math inline">\(n \in [1, 2 \times 10 ^ 5]\)</span></li></ul><h2 id="解答-5">解答</h2><p>用 <span class="math inline">\(dp_{\{i, j\}}\)</span> 表示前缀长为<span class="math inline">\(i\)</span>、<spanclass="math inline">\(\{A\}\)</span> 的前缀和为 <spanclass="math inline">\(j\)</span> 的方案数，所求即 <spanclass="math inline">\(\displaystyle \sum _{j = -\infty}^{\infty}dp_{\{n, j\}}\)</span>。</p><p>而对于转移：</p><ol type="1"><li><strong>Copy:</strong> <span class="math inline">\(dp_{\{i, j\}} =dp_{\{i - 1, j - B_i\}}\)</span></li><li><strong>Prefix Sum:</strong> <span class="math inline">\(dp_{\{i,B_i\}} = \displaystyle\sum_{j = -\infty}^{\infty} dp_{\{i - 1,j\}}\)</span></li></ol><p>（首先注意到第一维可以优化掉），第二种操作是简单的，只需要维护一下前缀即可快速转移，而对于第一种<strong>全局修改</strong> 的操作却不能很快地维护。</p><hr /><p>这里就需要引入科技：<strong>VeniceTechnique</strong>（水位线技术）了！只需要维护一个全局懒标记<code>lv</code>（也称水位线）就可以快速完成：</p><ol type="1"><li>增 <code>S.insert(lv + x)</code></li><li>删 <code>S.erase(S.find(lv + x))</code></li><li>全局加 <code>lv += x</code></li><li>得到最小值 <code>*S.begin() - lv</code></li></ol><blockquote><p>一个带有懒标记的 <code>multiset</code> 而已。</p></blockquote><hr /><p>如果使用 <code>multiset</code> 时间复杂度就是 <spanclass="math inline">\(\mathcal O(n \log n)\)</span> 的了！若使用<code>unordered_map</code> 还可进一步优化为 <spanclass="math inline">\(\mathcal O(n)\)</span>。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1E9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>i64<span class="token punctuation">,</span> i64<span class="token punctuation">,</span> custom_hash<span class="token operator">></span> dp<span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  i64 s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> lv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    i64 prefix <span class="token operator">=</span> s <span class="token operator">-</span> dp<span class="token punctuation">[</span>lv<span class="token punctuation">]</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">+</span> prefix<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span>lv<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>lv<span class="token punctuation">]</span> <span class="token operator">+</span> prefix<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    lv <span class="token operator">-=</span> x<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Venice technique </tag>
            
            <tag> dp </tag>
            
            <tag> lcm </tag>
            
            <tag> dfs </tag>
            
            <tag> Tree dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf-edu128</title>
      <link href="//cf/e128/"/>
      <url>//cf/e128/</url>
      
        <content type="html"><![CDATA[<h1 id="a.-minimums-and-maximums">A. Minimums and Maximums</h1><h2 id="题意">题意</h2><p>一个包含 <span class="math inline">\(l_1 \sim r_1\)</span>个最小值，<span class="math inline">\(l_2 \sim r_2\)</span>个最大值的数组最短是多少？</p><h2 id="解答">解答</h2><p>令 <span class="math inline">\(l_1 \le l_2\)</span>，若 <spanclass="math inline">\(l_2 \in [l_1,r_1]\)</span>，则可以全设置为一种数值，数量为 <spanclass="math inline">\(l_2\)</span>。否则为 <spanclass="math inline">\(l_1 + l_2\)</span> 个数。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c <span class="token operator">>></span> d<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token punctuation">&#123;</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">+</span> a <span class="token operator">*</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span><span class="token function">clamp</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(1)\)</span></p></blockquote><h1 id="b.-robots">B. Robots</h1><h2 id="题意-1">题意</h2><p>二维地图上有一些棋子，他们的移动步伐一致，问是否可能在任何棋子都不越界情况下将某个棋子移动至<span class="math inline">\((0, 0)\)</span>。</p><h2 id="解答-1">解答</h2><p>想象成把终点移动至某个棋子。</p><p>要求即终点的横、纵两维同时切割到一个棋子。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">0X3F3F3F3F</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x <span class="token operator">=</span> inf<span class="token punctuation">,</span> y <span class="token operator">=</span> inf<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>   <span class="token keyword">auto</span> grids <span class="token operator">=</span> <span class="token generic-function"><span class="token function">multivector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> grids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>grids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'R'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>grids<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'R'</span> <span class="token operator">?</span> <span class="token string">"YES\n"</span> <span class="token operator">:</span> <span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n \timesm)\)</span>。</p></blockquote><blockquote><p>由于题目保证至少有一个棋子，因而访问到的空间都是合理的。</p></blockquote><h1 id="c.-binary-string">C. Binary String</h1><h2 id="题意-2">题意</h2><p>希望 <span class="math inline">\(\max\{\)</span> 剩下的 <spanclass="math inline">\(0\)</span>，删去的 <spanclass="math inline">\(1\)</span> <span class="math inline">\(\}\)</span>尽可能 <strong>小</strong>。</p><p>为此，你可以从两端删去任意多的字符，求此值。</p><h2 id="解答-2">解答</h2><p>从开头和结尾删去一些字符，实际上就是找到一个子区间。若固定区间的任一端点，另一端的变化是单调的。</p><p>双指针枚举，在 <span class="math inline">\(cnt_0 \lt cnt_1\)</span>情况（保证单调性）下一直右移右端点。右端点右移时，<spanclass="math inline">\(0\)</span> 可能变多，（从右侧）删去的 <spanclass="math inline">\(1\)</span>可能减少；而左端点右移时，（从左侧）删去的 <spanclass="math inline">\(1\)</span> 可能增多，留下的 <spanclass="math inline">\(0\)</span> 可能减少。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> o <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>      z <span class="token operator">+=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">;</span>      o <span class="token operator">-=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    a <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    z <span class="token operator">-=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    o <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p><p>两者至多也只会各自遍历一次数组，因而为线性时间。</p></blockquote><h1 id="d.-dog-walking">D. Dog Walking</h1><h2 id="题意-3">题意</h2><p>&lt;++&gt;</p><h2 id="解答-3">解答</h2><p>&lt;++&gt;</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">&lt;</span><span class="token operator">++</span><span class="token operator">></span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcalO(&lt;++&gt;)\)</span></p></blockquote><h1 id="section">&lt;++&gt;</h1><h2 id="题意-4">题意</h2><p>&lt;++&gt;</p><h2 id="解答-4">解答</h2><p>&lt;++&gt;</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">&lt;</span><span class="token operator">++</span><span class="token operator">></span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcalO(&lt;++&gt;)\)</span></p></blockquote><h1 id="section-1">&lt;++&gt;</h1><h2 id="题意-5">题意</h2><p>&lt;++&gt;</p><h2 id="解答-5">解答</h2><p>&lt;++&gt;</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">&lt;</span><span class="token operator">++</span><span class="token operator">></span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcalO(&lt;++&gt;)\)</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf788</title>
      <link href="//cf/788/"/>
      <url>//cf/788/</url>
      
        <content type="html"><![CDATA[<p class="note note-danger">这场学弟上蓝了，很是羡慕。希望自己能加油！</p><p><ahref="https://codeforces.com/contest/1670">https://codeforces.com/contest/1670</a></p><h1 id="a.-prof.-slim">A. Prof. Slim</h1><h2 id="题意">题意</h2><p>给定一些数，可多次选择两个符号不同的数字并交换他们的符号，这样操作能否使数组变为非严格上升的？</p><ul><li>保证均不为 <span class="math inline">\(0\)</span></li></ul><h2 id="解答">解答</h2><p>首先需要特判本来就有序。</p><p>否则（如果同时存在正负数）我们总能将负号集中在前面，正号放在后面，随后判断是否非严格上升即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>    cnt <span class="token operator">+=</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">is_sorted</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">less</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">transform</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">transform</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> cnt<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">negate</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">is_sorted</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">less</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="b.-dorms-war">B. Dorms War</h1><h2 id="题意-1">题意</h2><p>给定字符串 <span class="math inline">\(s\)</span> 以及 <spanclass="math inline">\(k\)</span>个特殊字符。可多次：删除特殊字符前面的字符, 直到不能删除为止。</p><p>问能操作多少次？</p><p class="note note-info">一个例子</p><blockquote><p><span class="math inline">\(s = ``joobeel&quot;, S = \{``o&quot;,``e&quot;\}\)</span></p><p><spanclass="math inline">\(``\color{red}{jo}\color{black}{o}\color{red}{be}\color{black}{el}&quot;\rightarrow ``\color{red}{o}\color{black}{el}&quot; \rightarrow``el&quot;\)</span></p></blockquote><h2 id="解答-1">解答</h2><p>不能操作，当且仅当特殊字符是第一个字符且是唯一一个特殊字符。</p><p>我们注意到，这个操作是贪心的，不是删除前面的所有字符（前面没有特殊字符时）就是删除到前面的特殊字符。</p><p>于是整个操作将会执行 <span class="math inline">\(\max\left\{p_{i} -p_{i - 1}\right\}\)</span> 次，即特殊字符间的最大间隔。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> k<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> k<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> S<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span>    S<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token punctuation">&#123;</span>r<span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n \logn)\)</span></p></blockquote><p>Bonus: 直接记录所有位置即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> k<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> k<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>bitset<span class="token operator">&lt;</span><span class="token number">26</span><span class="token operator">></span> S<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span>    S<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token punctuation">&#123;</span>r<span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="c.-where-is-the-pizza">C. Where is the Pizza?</h1><h2 id="题意-2">题意</h2><p>给定两个排列 <span class="math inline">\(\{A\}\{B\}\)</span>，以及一个序列 <spanclass="math inline">\(\{D\}\)</span>。</p><p>生成一个排列 <span class="math inline">\(\{C\}\)</span>，满足如果<span class="math inline">\(D_i \ne 0\)</span> ，那么 <spanclass="math inline">\(C_i = D_i\)</span>; 否则 <spanclass="math inline">\(C_i \in \{A_i, B_i\}\)</span>。</p><p><span class="math inline">\(\{C\}\)</span> 有多少种可能？</p><h2 id="解答-2">解答</h2><p>连接 <span class="math inline">\(A_i \rightarrowB_i\)</span>，因为是排列，所以总能形成若干联通块。</p><p>每一个联通块，同时必定也是环。对于每一个环，若有一个元素确定，那么整个环在<span class="math inline">\(\cal \{C\}\)</span> 中也是确定的。</p><p>否则每个元素只有两种可能 <span class="math inline">\(A_i\mathtt{\;or\;} B_i\)</span>。每个环都是独立的，因此答案为 <spanclass="math inline">\(2 ^ {t}\)</span>，其中 <spanclass="math inline">\(t\)</span> 为环个数。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1'000'000'007</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">visited</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>    i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>    i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> d<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      visited<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> visited<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">st</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        flag <span class="token operator">|=</span> visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token number">2ll</span> <span class="token operator">*</span> ans <span class="token operator">%</span> mod<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><p>Bonus: 实际上是数点数大于 <span class="math inline">\(2\)</span>并且没有被标记的联通块，使用并查集即可。</p><details><summary>展开代码</summary><p><img src="/images/cf/cf788c.png" / loading="lazy"></p></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n \alpha(n))\)</span></p></blockquote><p class="note note-primary">Bonus2:<a href="https://atcoder.jp/contests/abc247/tasks/abc247_f">https://atcoder.jp/contests/abc247/tasks/abc247_f</a></p><h1 id="d.-very-suspicious">D. Very Suspicious</h1><h2 id="题意-3">题意</h2><p>在一个无限大的由六边形的平面上用直线（必须与六边形的某条边平行）分割出等边三角形,问要分割出<span class="math inline">\(n\)</span>个等边三角形至少需要多少条直线。</p><p><img src="/images/cf/cf788d.png" / loading="lazy"></p><h2 id="解答-3">解答</h2><p>设三种方向的线分别有 <span class="math inline">\(x, y, z\)</span>条，容易发现他们会交出 <span class="math inline">\((xy + yz +xz)\)</span>个点，这些点与六边形本来的边构成一系列（成对出现）等边三角形。</p><p><img src="/images/cf/cf788d2.png" / loading="lazy"></p><p>我们熟知</p><p><span class="math display">\[2 (xy + yz + xz) \le 2 (x ^ 2 + y ^ 2 + z ^ 2) \quad (``=&quot;\mathrm{\;iff.\;} x = y = z)\]</span></p><p>现在有 <span class="math inline">\(x + y + z = n\)</span>, 均分出<spanclass="math inline">\(\left\langle\left\lfloor\dfrac{n}{3}\right\rfloor,\left\lfloor\dfrac{n+ 1}{3}\right\rfloor,\left\lceil\dfrac{n}{3}\right\rceil\right\rangle\)</span> 即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> tt<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> tt<span class="token punctuation">;</span> tt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> tt <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  i64 l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">100'000</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i64 mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    i64 x <span class="token operator">=</span> mid <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> y <span class="token operator">+</span> y <span class="token operator">*</span> z <span class="token operator">+</span> x <span class="token operator">*</span> z<span class="token punctuation">)</span> <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(T \logn)\)</span></p></blockquote><p class="note note-info">Bonus: <a href="http://oeis.org/A030511">http://oeis.org/A030511</a></p><details><summary>展开</summary><p><span class="math display">\[\begin{cases}a(n) = \dfrac{2 \times (n - 1)^2}{3} &amp; if\; n \equiv 1 \pmod 3\\\\a(n) = \dfrac{2 \times n \times (n - 2)}{3} &amp; \rmotherwise.\end{cases}\]</span></p></details><h1 id="e.-hemose-on-the-tree">E. Hemose on the Tree</h1><h2 id="题意-4">题意</h2><p>给定一棵 <span class="math inline">\(2 ^ p\)</span>个节点的树，给其点、边标注 <span class="math inline">\([1, 2n -1]\)</span> 的权，随后选择一个根。</p><p>使得根到其他点经过的点、边权之异或和的最大值最小。</p><h2 id="解答-4">解答</h2><p>最高位是 <span class="math inline">\(p\)</span>，注意到整个值域关于<span class="math inline">\(n\)</span> 对称，一个自然的想法是 <spanclass="math inline">\(n \mathtt{\;xor\;} t \mathtt{\;xor\;} n + t =0\)</span>。</p><p>即以 <span class="math inline">\(n\)</span>为根，其他的数对称放置在点与边上即可, 这样就能使得权重或 <spanclass="math inline">\(0\)</span> 或 <spanclass="math inline">\(n\)</span>, 分层构造之。</p><p>同时，因为先经过边，所以边上要放大的数抵消掉最高位，到下一层再反转过来就行了。</p><hr /><p>有没有更好的解呢？答案是否定的。</p><p>取 <span class="math inline">\(t \;(t \lt n)\)</span>做根，要使得异或出来的数字也是 <span class="math inline">\(\ltn\)</span> 的，那么接下来每条边、每个点都需要是 <spanclass="math inline">\(\lt n\)</span> 的，这显然不行。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> p<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> p<span class="token punctuation">;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span> <span class="token function">G</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>    u <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> v <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token keyword">auto</span> dfs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">bool</span> v<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span>to<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">!=</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token punctuation">&#123;</span>to <span class="token operator">^</span> n<span class="token punctuation">,</span> to<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token punctuation">&#123;</span>to<span class="token punctuation">,</span> to <span class="token operator">^</span> n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">self</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> to<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>dfs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1\n"</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">ostream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">ostream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n = 2 ^p)\)</span></p></blockquote><h1 id="f.-jee-you-see">* F. Jee, You See?</h1><h2 id="题意-5">题意</h2><p>给定 <span class="math inline">\(n, l, r, z\)</span>，问有多少长度为<span class="math inline">\(n\)</span> 的序列 <spanclass="math inline">\(s\)</span> 满足：</p><ul><li><span class="math inline">\(\displaystyle\sum_{i = l}^r{s[i]} \in[l, r]\)</span></li><li><span class="math inline">\(\displaystyle\bigoplus_{i = l}^r{s[i]} =z\)</span></li></ul><h2 id="解答-5">解答</h2><p>数位背包，待学。</p><p>&lt;++&gt;</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span>i64 l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> z<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> l <span class="token operator">>></span> r <span class="token operator">>></span> z<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Z<span class="token operator">></span> <span class="token function">choose</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>choose<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  choose<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> choose<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">auto</span> solve <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>i64 r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Z<span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> r <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> z <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Z<span class="token operator">></span> <span class="token function">g</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> d<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> u<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> choose<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    dp <span class="token operator">=</span> g<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Z</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">solve</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n ^ 2 \logn)\)</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> binary search </tag>
            
            <tag> todo </tag>
            
            <tag> oeis </tag>
            
            <tag> greedy </tag>
            
            <tag> dsu </tag>
            
            <tag> circle </tag>
            
            <tag> constructive </tag>
            
            <tag> bitwise </tag>
            
            <tag> digit knapsack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf787</title>
      <link href="//cf/787/"/>
      <url>//cf/787/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://codeforces.com/contest/1675">https://codeforces.com/contest/1675</a></p><h1 id="a.-food-for-animals">A. Food for Animals</h1><h2 id="题意">题意</h2><p>给定 <span class="math inline">\(a\)</span> 个狗粮，<spanclass="math inline">\(b\)</span> 个猫粮，<spanclass="math inline">\(c\)</span> 个任意。是否能够给 <spanclass="math inline">\(x\)</span> 只狗、<spanclass="math inline">\(y\)</span> 只猫各自分配一个？</p><h2 id="解答">解答</h2><p>最后分配任意的。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>  x <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>x <span class="token operator">-</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  y <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>y <span class="token operator">-</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">></span> c <span class="token operator">?</span> <span class="token string">"NO\n"</span> <span class="token operator">:</span> <span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(1)\)</span></p></blockquote><h1 id="b.-make-it-increasing">B. Make It Increasing</h1><h2 id="题意-1">题意</h2><p>给定数组，你可多次将某数 <strong>整除</strong> <spanclass="math inline">\(2\)</span>，问能否将其变为严格单调递增的序列？如果有，回答最小操作次数。</p><h2 id="解答-1">解答</h2><blockquote><p>事实证明，不能 xjb 想特判，不然会死得很惨。</p></blockquote><p>固定最后一个值不动，从后往前遍历即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ans <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n \lg n)\)</span></p></blockquote><h1 id="c.-detective-task">C. Detective Task</h1><h2 id="题意-2">题意</h2><p>房间里放了一幅画，但是被贼了。小明询问他的朋友们<strong>是否看到了画</strong>，朋友们将回答 <spanclass="math inline">\(1 / 0 / ?\)</span> 表示肯定与否、记不清了。</p><p>房间里某时刻仅有一个人，询问次序为离开次序。问有多少人可疑？</p><h2 id="解答-2">解答</h2><p><span class="math inline">\(0 \star 1\)</span>出现时，可以断定一定有人说谎，因此答案为首个 <spanclass="math inline">\(0\)</span> 和最后一个 <spanclass="math inline">\(1\)</span> 的距离。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p0 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      p0 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      p1 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation">(</span>p0 <span class="token operator">-</span> p1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="d.-vertical-paths">D. Vertical Paths</h1><h2 id="题意-3">题意</h2><p>求最少的不交链将给定的树完全覆盖。</p><h2 id="解答-3">解答</h2><p>显然叶子个数即为所求。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">leaf</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      leaf<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">count</span><span class="token punctuation">(</span>leaf<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> leaf<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">visited</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" \n"</span><span class="token punctuation">[</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="e.-replace-with-the-previous-minimize">E. Replace With thePrevious, Minimize</h1><h2 id="题意-4">题意</h2><p>将出现的所有某字母 <span class="math inline">\(x\)</span> 都变为<span class="math inline">\(x - 1\)</span>。问这样对 <spanclass="math inline">\(s\)</span> 操作 <spanclass="math inline">\(k\)</span> 次之后，得到的最小字符串是什么？</p><h2 id="解答-4">解答</h2><p>在改变 <span class="math inline">\(c \rightarrow b \rightarrowa\)</span> 的过程中可以将 <span class="math inline">\(b, c\)</span>都变为 <spanclass="math inline">\(a\)</span>。因此我们只需要考虑怎么操作某一个较大的字符。</p><p>需要字典序最小，因此考虑从左至右枚举，找到第一个大于 <spanclass="math inline">\(k\)</span>的字符将其改小，小于该字符的实体都可变作 <spanclass="math inline">\(``a&quot;\)</span>。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> k <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> l <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> k <span class="token operator">+</span> M<span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>c <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          c <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    M <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token char">'a'</span> <span class="token operator">+</span> M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><p>Bonus:将能同时变化的点连接起来，某个联通块内的字符都变为同一种字符。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> k <span class="token operator">>></span> s<span class="token punctuation">;</span>  DSU <span class="token function">g</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        g<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>c <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n\alpha(n))\)</span></p></blockquote><h1 id="f.-vlad-and-unfinished-business">F. Vlad and UnfinishedBusiness</h1><h2 id="题意-5">题意</h2><p>求在树上从 <span class="math inline">\(x\)</span> 经过给定的 <spanclass="math inline">\(k\)</span> 个关键点到达 <spanclass="math inline">\(y\)</span> 的最小步数。</p><h2 id="解答-5">解答</h2><p>不妨以 <span class="math inline">\(x\)</span>为根，我们熟知树上两点的路是唯一的，因而要到达关键点的最优走法自然是遍历某子树的所有关键点，随后原路返回。</p><p>特殊的，<span class="math inline">\(y\)</span>不需要折返，最终减去其深度即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> k <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>  x <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>    i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">G</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>    u <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> v <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dep</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pre</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">auto</span> dfs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>to <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">!=</span> pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pre<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>      dep<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">self</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>dfs<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">visited</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>p <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      visited<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      ans <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>      p <span class="token operator">=</span> pre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  ans <span class="token operator">-=</span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="g.-sorting-pancakes">G. Sorting Pancakes</h1><h2 id="题意-6">题意</h2><p>给定一个和为 <span class="math inline">\(m\)</span>的数组，可多次选择俩相邻元素，一个加一另一个减一。</p><p>问最少操作多少此使得数组非严格递减？</p><ul><li><span class="math inline">\(m \le 250\)</span></li></ul><h2 id="解答-6">解答</h2><p>用 <span class="math inline">\(dp_{\{i, j, k\}}\)</span> 表示前 <spanclass="math inline">\(i\)</span> 个位置、<strong>当前和</strong> 为<span class="math inline">\(j\)</span>、最后一个数是 <spanclass="math inline">\(k\)</span> 的满足题意的答案。</p><p><span class="math display">\[dp_{\{i, j, k\}} = \min_{t \le k}dp_{\{i-1, j, t\}} + \left|\sum_{q = 1}^ {i + 1}a_q - (j + k)\right|\]</span></p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">chmin</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> T y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>vector <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">vector</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0X7F7F7F7F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> mx <span class="token operator">=</span> <span class="token number">0X7F7F7F7F</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> m<span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">chmin</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> k <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">chmin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> mx <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>std<span class="token double-colon punctuation">::</span><span class="token function">min_element</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n m ^ 2)\)</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> dfs </tag>
            
            <tag> dsu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf786</title>
      <link href="//cf/786/"/>
      <url>//cf/786/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://codeforces.com/contest/1674">https://codeforces.com/contest/1674</a></p><h1 id="a.-number-transformation">A. Number Transformation</h1><h2 id="题意">题意</h2><p>给定 <span class="math inline">\(x, y\)</span>。试给出 <spanclass="math inline">\((a, b)\)</span> 表示通过对 <spanclass="math inline">\(x\)</span> 乘以 <span class="math inline">\(b ^a\)</span> 将 <span class="math inline">\(x\)</span> 转变为 <spanclass="math inline">\(y\)</span>，或回答不可能。</p><h2 id="解答">解答</h2><p><span class="math inline">\(x \le y \land x \mid y\)</span>时有解，<span class="math inline">\((1, \dfrac{y}{x})\)</span>是可满足的一组解。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> a <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">&lt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0 0\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>b <span class="token operator">/</span> a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(1)\)</span></p></blockquote><h1 id="b.-dictionary">B. Dictionary</h1><h2 id="题意-1">题意</h2><p>两个不同字母组成的集合中，给定的 <spanclass="math inline">\(s\)</span> 居于第几？</p><h2 id="解答-1">解答</h2><p>注意到 <span class="math inline">\(26 ^ 2 - 26 =650\)</span>，非常小。预处理出来这个集合也是可以接受的。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    initialized <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span> c<span class="token punctuation">;</span>          c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>          c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>          mp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span> c<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>ch <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> mp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(|\Sigma| ^ 2 + T \log|\Sigma|)\)</span></p></blockquote><hr /><p>Bonus: 此集合实为 <span class="math inline">\(26\)</span>进制「抠掉」所有 <span class="math inline">\(a = b\)</span>的点。因此可以关于 <span class="math inline">\(a &lt;\!\!\!\!?\;\;b\)</span> 分类讨论。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>  a <span class="token operator">-=</span> <span class="token char">'a'</span><span class="token punctuation">,</span> b <span class="token operator">-=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">25</span> <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">></span> a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(1)\)</span></p></blockquote><h1 id="c.-infinite-replacement">C. Infinite Replacement</h1><h2 id="题意-2">题意</h2><p>给定两个字符串 <span class="math inline">\(s, t\)</span>，其中 <spanclass="math inline">\(s\)</span> <strong>全为</strong><code>a</code>。你可以多次将某个 <code>a</code> 替换为 <spanclass="math inline">\(t\)</span>，问有多少种可能的字符串？</p><p>或回答有无穷多种。</p><h2 id="解答-2">解答</h2><p>如果 <span class="math inline">\(t =``a&quot;\)</span>，那么总有最初的那一种。如果替换上去的部分依然包含<spanclass="math inline">\(``a&quot;\)</span>，那么有无穷多种可能。正如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>否则（<span class="math inline">\(``a&quot; \notin t\)</span>）,原串中的每一个位置都可以选择换或者不换，于是方案数为 <spanclass="math inline">\(2 ^ n\)</span>。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">,</span> t<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> s <span class="token operator">>></span> t<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">count</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(|t|)\)</span></p></blockquote><h1 id="d.-a-b-c-sort">D. A-B-C Sort</h1><h2 id="题意-3">题意</h2><p>给定数组 <span class="math inline">\(\{A\}\)</span>，以及两个空数组<span class="math inline">\(\{B\},\{C\}\)</span>。执行下面的算法之后，<spanclass="math inline">\(\{C\}\)</span> 是否能变为单调不减的序列？</p><p><img src="/images/cf/cf786d.png" / loading="lazy"></p><details><summary>这一段的 LaTeX 代码</summary><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\def</span><span class="token function selector">\SetClass</span><span class="token punctuation">&#123;</span>article<span class="token punctuation">&#125;</span><span class="token function selector">\documentclass</span><span class="token punctuation">&#123;</span><span class="token keyword">\SetClass</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">[</span>lined,boxed,commentsnumbered<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">algorithm2e</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">algorithm</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>H<span class="token punctuation">]</span>  <span class="token function selector">\SetAlgoLined</span><span class="token comment">%%  \KwData&#123; \&#123; A \&#125;&#125;</span><span class="token comment">%%  \KwResult&#123;&#125;</span>  <span class="token function selector">\While</span><span class="token punctuation">&#123;</span> <span class="token function selector">\&#123;</span>A<span class="token function selector">\&#125;</span> is not empty <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>    <span class="token function selector">\eIf</span><span class="token punctuation">&#123;</span> <span class="token function selector">\&#123;</span>B<span class="token function selector">\&#125;</span> is odd long <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>      <span class="token equation string">$p <span class="token equation-command regex">\leftarrow</span>$</span> B<span class="token punctuation">[</span>middle - 1<span class="token punctuation">]</span> or B<span class="token punctuation">[</span>middle + 1<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>      <span class="token equation string">$p <span class="token equation-command regex">\leftarrow</span>$</span> B<span class="token punctuation">[</span>middle<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    move last element of <span class="token function selector">\&#123;</span>A<span class="token function selector">\&#125;</span> to B<span class="token equation string">$_p$</span>  <span class="token punctuation">&#125;</span>  <span class="token function selector">\While</span><span class="token punctuation">&#123;</span> <span class="token function selector">\&#123;</span>B<span class="token function selector">\&#125;</span> is not empty <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>    <span class="token function selector">\eIf</span><span class="token punctuation">&#123;</span> <span class="token function selector">\&#123;</span>B<span class="token function selector">\&#125;</span> is even long <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>      <span class="token equation string">$p <span class="token equation-command regex">\leftarrow</span>$</span> B<span class="token punctuation">[</span>middle - 1<span class="token punctuation">]</span> or B<span class="token punctuation">[</span>middle + 1<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>      <span class="token equation string">$p <span class="token equation-command regex">\leftarrow</span>$</span> B<span class="token punctuation">[</span>middle<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    append B<span class="token equation string">$_p$</span> to the end of <span class="token function selector">\&#123;</span>C<span class="token function selector">\&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>A-B-C Sort Algorithm<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">algorithm</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre></details><h2 id="解答-3">解答</h2><p>上述算法两个步骤基本互逆，这使得我们<strong>只能调整相邻的元素</strong>。</p><p>模拟即可，但需要注意到 <span class="math inline">\([1, 2, 1]\rightarrow [1, 1, 2]\)</span>。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">is_sorted</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"yes\n"</span> <span class="token operator">:</span> <span class="token string">"no\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><p>Bonus: 赛时代码。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">is_sorted</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"YES\n"</span> <span class="token operator">:</span> <span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></details><h1 id="e.-breaking-the-wall">E. Breaking the Wall</h1><blockquote><p>本题 Hacked 数高达 <span class="math inline">\(1500^+\)</span>。</p></blockquote><h2 id="题意-4">题意</h2><p>给定一个数组 <spanclass="math inline">\(\{A\}\)</span>，你可多次选择单点 <spanclass="math inline">\(-2\)</span>，相邻元素（如果有）将会 <spanclass="math inline">\(-1\)</span>。</p><p>问至少需要打击多少次才会出现至少两个位置 <spanclass="math inline">\(&lt; 0\)</span> ？</p><h2 id="解答-4">解答</h2><p>枚举这俩可能的情况：</p><ul><li><p>两者相邻：<span class="math inline">\([1, 2, 1]\)</span> 或者<span class="math inline">\([1, 3, 3, 1]\)</span> 打击。</p></li><li><p>隔着一个：<span class="math inline">\([1, 2, 1]\)</span>打击。<span class="math inline">\(a, b\; (a \le b), a +\left\lceil\dfrac{b - a}{2}\right\rceil\)</span></p></li><li><p>离得很远：选择最小的两元素多次单点打击。</p></li></ul><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> d<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m1 <span class="token operator">=</span> INT_MAX<span class="token punctuation">,</span> m2 <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span><span class="token function">tie</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> m2<span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> m1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      m2 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">C</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> A <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> B <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token function">C</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">C</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">C</span><span class="token punctuation">(</span>A <span class="token operator">+</span> B<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> A <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> B <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">></span> B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> A <span class="token operator">+</span> <span class="token function">C</span><span class="token punctuation">(</span>B <span class="token operator">-</span> A<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="f.-desktop-rearrangement">F. Desktop Rearrangement</h1><h2 id="题意-5">题意</h2><p>在二维矩阵上有一些 <span class="math inline">\(``\star&quot;\)</span>与 <span class="math inline">\(``\cdot&quot;\)</span>。</p><p>给出多组询问, 将 <span class="math inline">\((x, y)\)</span>格点的符号反转，即 <span class="math inline">\(``\star&quot;\leftrightarrow ``\cdot&quot;\)</span> 之后，回答将当前桌面上的 <spanclass="math inline">\(``\star&quot;\)</span>从左到右、从上到下排布整齐至少需要移动多少个 <spanclass="math inline">\(``\star&quot;\)</span> ？</p><p><strong>这个修改是永久的</strong>。</p><h2 id="解答-5">解答</h2><p>最小花费就是不在前 <strong>tot</strong> 个位置的星星个数。</p><p>对于每次修改，只会增加或者减少一个星星，因此每次回答都是 <spanclass="math inline">\(\mathcal O(1)\)</span> 的。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> q<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">possessed</span><span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> ch<span class="token punctuation">;</span>      std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>possessed<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          o <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        possessed<span class="token punctuation">[</span>j <span class="token operator">*</span> n <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">*</span> n <span class="token operator">+</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          o <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> q <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">--</span> y <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token operator">--</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>possessed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        o <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      cnt <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>      possessed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>possessed<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        o <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>possessed<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        o <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>      possessed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        o <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">-</span> o <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n \times m +q)\)</span></p></blockquote><h1 id="g.-remove-directed-edges">G. Remove Directed Edges</h1><h2 id="题意-6">题意</h2><p>给定一张 <span class="math inline">\(\rmDAG\)</span>，删去若干边，使得每个点：</p><ul><li>若原有出边，则至少删去一条。</li><li>若原有入边，则至少删去一条。</li></ul><p>随后选取子图 <spanclass="math inline">\(\{S\}\)</span>，其中的任两点之间可达（单方面到达即可）。求<span class="math inline">\(\left|S\right|\)</span> 最大是多少。</p><h2 id="解答-6">解答</h2><p>删哪些边？那些入、出度为 <span class="math inline">\(1\)</span>的点必须删除, 所以入、出度同时为 <span class="math inline">\(1\)</span>的点一定不会成为答案。</p><p>剩下的点，即使不与最终的 <span class="math inline">\(\{S\}\)</span>联通也无关紧要, 因为最后需要求解的子图也是 <spanclass="math inline">\(\rm DAG\)</span>，其最长链即为所求, <spanclass="math inline">\(dp\)</span> 会解决掉这些情况。</p><p><span class="math inline">\(dp\)</span> 的过程实际上就是遍历 <spanclass="math inline">\(DAG\)</span>, 使用拓扑排序的 Kahn 算法即可。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200'007</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> deg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> nd<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>    <span class="token operator">++</span> deg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">++</span> deg<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">and</span> deg<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">++</span> nd<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span> nd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n + m)\)</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kahn </tag>
            
            <tag> Topo-order </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf785</title>
      <link href="//cf/785/"/>
      <url>//cf/785/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://codeforces.com/contest/1673">https://codeforces.com/contest/1673</a></p><blockquote><p>邓老师说，给自己看的题解要写的简练一些。这样回头看的时候也会轻松许多。</p></blockquote><h1 id="a.-subtle-substring-subtraction">A. Subtle SubstringSubtraction</h1><h2 id="题意">题意</h2><p>给定字符串 <span class="math inline">\(s\)</span>, 并定义字符串的<strong>权重</strong> 为其字符顺序之和。如<code>w("aba") = 1 + 2 + 1</code>。</p><p>博弈，先手可取走 <span class="math inline">\(s\)</span><strong>偶数长度</strong> 的子串，并获得其权重，而后者则可取走<strong>奇数长度</strong> 的。无法行动时分高者胜。问：</p><ol type="1"><li>谁胜？</li><li>两人获得的 <strong>权重差</strong> 最大为多少？</li></ol><h2 id="解答">解答</h2><p>如果 <span class="math inline">\(s\)</span>仅含一个字符，先手无法行动，于是后手胜。</p><p>偶数长度，先手胜，并获得全部字符串。</p><p>奇数长度，先手也可取得 <code>s[1:]</code> 或者<code>s[:-1]</code>，容易发现得分不会劣于后手，因而先手总胜。</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>ch <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ch <span class="token operator">-=</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    ans <span class="token operator">+=</span> ch<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bob "</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ans <span class="token operator">-=</span> <span class="token number">2</span> <span class="token operator">*</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Alice "</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="b.-a-perfectly-balanced-string">B. A Perfectly BalancedString?</h1><h2 id="题意-1">题意</h2><p>定义字符串 “平衡”，当且仅当其任意两字符 <spanclass="math inline">\(a, b\)</span> 满足在任意子串中出现频数相差不大于<span class="math inline">\(1\)</span>。</p><p>判断给定的字符串是否 “平衡”。</p><h2 id="解答-1">解答</h2><blockquote><p>注意到 <span class="math inline">\(a \star a\)</span> 及不在 <spanclass="math inline">\(\star\)</span> 中的一个字符 <spanclass="math inline">\(x\)</span> 总是不满足条件的。如在 <spanclass="math inline">\(``abcak&quot;\)</span> 中选择三元组 <spanclass="math inline">\(\left \langle ``abca&quot;, ``a&quot;, ``k&quot;\right \rangle\)</span>。 如果不存在这样的情形，则一定“平衡”：组成该字符串的子串均 “平衡”，则该串也如此。 在 <spanclass="math inline">\(\mathcal O(\left|\Sigma\right| \times n)\)</span>检验这一点是容易的，但 ”平衡” 串具有一个优美的性质：</p></blockquote><p>其 <strong>必有循环节</strong> （注意 <spanclass="math inline">\(``aba&quot;\)</span> 也是循环的, 即存在 <spanclass="math inline">\(k\)</span> 使得 <span class="math inline">\(s[i +k] = s[i]\)</span>, 其中 <span class="math inline">\(i\)</span> 遍历<span class="math inline">\(1 \sim n - k\)</span>）。</p><hr /><p>证明：</p><p><span class="math inline">\(a \star a ?\)</span>：如果 <spanclass="math inline">\(? \not\in \star\)</span>，则不平衡。</p><p>反之 <span class="math inline">\(\star\)</span> 遍历所有非 <spanclass="math inline">\(a\)</span> 字符， 若 <spanclass="math inline">\(\star[1] \ne\; ?\)</span>，取 <spanclass="math inline">\(\left \langle ``\star[x:]?&quot;,``\star[0]&quot;, ``?&quot; \right \rangle, \mathtt{\;where\;} \star[x]= ?\)</span> 也不平衡。</p><p>因此必有 <span class="math inline">\(\star[0] =\; ?\)</span>。</p><hr /><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token number">200007</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token operator">></span> pos<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> si <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span>si<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      len <span class="token operator">=</span> i <span class="token operator">-</span> pos<span class="token punctuation">[</span>si<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pos<span class="token punctuation">[</span>si<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i <span class="token operator">+</span> len<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(n)\)</span></p></blockquote><h1 id="c.-palindrome-basis">C. Palindrome Basis</h1><h2 id="题意-2">题意</h2><p>整数划分问题，限制其中每个数都是回文的。</p><ul><li><span class="math inline">\(n \le 4 \times 10 ^ 4\)</span></li></ul><h2 id="解答-2">解答</h2><p>处理出所有的回文数，随后进行整数划分（完全背包计数 / <ahref="https://studyingfather.com/archives/3000">五边形数</a>）。</p><blockquote><p>表白 <code>SF</code>, /qq /xin</p></blockquote><style>.rated-user {  font-family: helvetica neue, Helvetica, Arial, sans-serif;  text-decoration: none !important;  font-weight: 700;  display: inline-block;}.user-legendary {  color: red !important;}.user-legendary::first-letter {  color: #000 !important;}</style><blockquote><p>注：其中 <code>Z</code> 为 <ahref="https://codeforces.com/profile/jiangly"><font class="rated-user user-legendary">jiangly</font></a>的整数模板类。</p></blockquote><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> palind<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">4E4</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>  <span class="token comment">// static std::array&lt;Z, N> dp&#123;&#125;; -> 寄！</span>  <span class="token keyword">static</span> Z dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    initialized <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">auto</span> s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        palind<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>num <span class="token operator">:</span> palind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> num <span class="token operator">&lt;=</span> N <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i <span class="token operator">+</span> num<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(O(n \times p), p\)</span>为回文数个数，非常小。</p></blockquote><h1 id="d.-lost-arithmetic-progression">D. Lost ArithmeticProgression</h1><h2 id="题意-3">题意</h2><p>有两个 <span class="math inline">\(A.P. \{A\}, \{B\}\)</span>，给出<span class="math inline">\(\{B\}\)</span> 以及 <spanclass="math inline">\(\{A\} \bigcap \{B\}\)</span>，问 <spanclass="math inline">\(\{A\}\)</span> 有多少种可能。</p><p>或回答有无穷多个。</p><h2 id="解答-3">解答</h2><p>首先如果 <span class="math inline">\(B_0 \gt C_0\)</span> 或者 <spanclass="math inline">\(B_{-1} \lt C_{-1}\)</span> 是不可以的，此时 <spanclass="math inline">\(\{C\}\)</span> 不合法。</p><p>在此基础上，如果 <span class="math inline">\(d_B \nmid C_0 -B_0\)</span> 也不行（即 <span class="math inline">\(\{B\} \bigcap \{C\}= \varnothing\)</span>）。</p><hr /><p>设 <span class="math inline">\(\{A\} = a + c \times \Z, \{B\} = b + d\times \Z\)</span>, 如何求其交？下面是一个例子：</p><p><span class="math display">\[\begin{cases}N = 5 n + 3 \\N = 7 n - 2\end{cases} \Rightarrow\begin{cases}N \equiv 3 \pmod 5 \\N \equiv 5 \pmod 7\end{cases} \Rightarrow_{\gcd(5, 7) = 1}N \equiv 33 \pmod {35}\]</span></p><p>注意到第二部分有唯一解当且仅当 <span class="math inline">\(\gcd(c, d)\mid \small | a - b \small |\)</span> (裴蜀定理)。</p><p>由中国剩余定理（或拓欧）可得，<spanclass="math inline">\(\dfrac{cd}{\gcd(c, d)} = \mathrm{lcm}(c,d)\)</span> 为解的模数，即公差。</p><p>于是我们找到了另一组不合法的情况：<span class="math inline">\(d_B\nmid d_C\)</span>。</p><hr /><p>如果 <span class="math inline">\(\{C\}\)</span> 的首项的前一项 <spanclass="math inline">\(C_0 - d_C \lt B_0\)</span>，或者最后一项 <spanclass="math inline">\(C_{-1} + d_C \gt B_{-1}\)</span> 时，<spanclass="math inline">\(\{A\}\)</span> 可以无限左右拓展。</p><p>否则有限组解，给定了 <span class="math inline">\(\{A\} \bigcap\{B\}\)</span>，于是从倍数转换成了约数。</p><p>对于 <span class="math inline">\(d_C\)</span>的约数，方案左右独立，根据乘法原理计算：</p><p><span class="math display">\[\sum_{\mathrm{lcm}(p, d_B) = d_C}\left( \dfrac{d_C}{p}\right)^2\]</span></p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  i64 b<span class="token punctuation">,</span> q<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token punctuation">,</span> r<span class="token punctuation">,</span> z<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> b <span class="token operator">>></span> q <span class="token operator">>></span> y <span class="token operator">>></span> c <span class="token operator">>></span> r <span class="token operator">>></span> z<span class="token punctuation">;</span>  i64 lb <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token punctuation">(</span>z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">,</span> lc <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> q<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">%</span> q <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> q <span class="token operator">||</span> c <span class="token operator">&lt;</span> b <span class="token operator">||</span> lb <span class="token operator">></span> lc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> r <span class="token operator">&lt;</span> b <span class="token operator">||</span> lb <span class="token operator">+</span> r <span class="token operator">></span> lc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1\n"</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  Z ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i64 i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">lcm</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">+=</span> r <span class="token operator">/</span> i <span class="token operator">*</span> r <span class="token operator">/</span> i<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">!=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i64 t <span class="token operator">=</span> r <span class="token operator">/</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">lcm</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          ans <span class="token operator">+=</span> r <span class="token operator">/</span> t <span class="token operator">*</span> r <span class="token operator">/</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(\mathcal O(\sqrt n \lgn)\)</span></p></blockquote><h1 id="e.-power-or-xor">* E. Power or XOR?</h1><h2 id="题意-4">题意</h2><p>&lt;++&gt;</p><h2 id="解答-4">解答</h2><p>&lt;++&gt;</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> LL <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1'000'000'007</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+=</span> y<span class="token punctuation">)</span> <span class="token operator">>=</span> mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">-=</span> mod<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>  cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">B</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>Bi <span class="token operator">:</span> B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> Bi<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> F<span class="token punctuation">;</span>  <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>F<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">,</span> k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> F<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">,</span> k<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token operator">&amp;</span>res <span class="token operator">=</span> F<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">,</span> k<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res <span class="token operator">^=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">and</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      LL x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">+=</span> B<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>      x <span class="token operator">*=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> s<span class="token punctuation">,</span> k <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> one <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>one<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">not</span> one<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(&lt;++&gt;\)</span></p></blockquote><h1 id="f.-anti-theft-road-planning">* F. Anti-Theft Road Planning</h1><h2 id="题意-5">题意</h2><p>&lt;++&gt;</p><h2 id="解答-5">解答</h2><p>&lt;++&gt;</p><details><summary>展开代码</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  x <span class="token operator">=</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>  y <span class="token operator">=</span> G<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">;</span> k <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      G<span class="token punctuation">[</span>k <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">key</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">^=</span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><blockquote><p>复杂度： <span class="math inline">\(&lt;++&gt;\)</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> todo </tag>
            
            <tag> period </tag>
            
            <tag> Pentagonal number </tag>
            
            <tag> knapsack problem counting </tag>
            
            <tag> Number Thoery </tag>
            
            <tag> crt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test-md-format</title>
      <link href="//blog/test-md-format/"/>
      <url>//blog/test-md-format/</url>
      
        <content type="html"><![CDATA[<h1 id="formula">formula</h1><div class="info"><blockquote><p>This is a test for <span class="math inline">\(\LaTeX\)</span> andother formats.</p></blockquote></div><p><span class="math display">\[f(x) = x ^ 2\]</span></p><p><span class="math display">\[\mathrm{ABCDEabcde1234}\\\mathit{ABCDEabcde1234}\\\mathbf{ABCDEabcde1234}\\\mathsf{ABCDEabcde1234}\\\mathtt{ABCDEabcde1234}\\\mathcal{ABCDEFGHIJK}\\\mathscr{ABCDEFGHIJK}\\\mathfrak{ABCDEFGHIJK}\\\mathbb{ABCDEFGHIJK}\\\]</span></p><p><span class="math display">\[\large P = \frac{\displaystyle{\sum_{i=1}^n (x_i- x)(y_i- y)}}{\displaystyle{\left[\sum_{i=1}^n(x_i-x)^2\sum_{i=1}^n(y_i- y)^2\right]^{1/2}}}\\\]</span></p><p><span class="math display">\[\color{black}{黑色},\color{red}{红色},\color{green}{绿色},\color{brown}{棕色},\color{pink}{粉色}\\\color{white}{白色},\color{blue}{蓝色},\color{red}{红色},\color{yellow}{黄色},\color{gray}{灰色}\\\color{orange}{橘色},\color{teal}{靛青},\color{darkgray}{深灰},\color{olive}{橄榄},\color{violet}{紫罗兰}\\\color{lime}{青柠},\color{lightgray}{淡灰},\color{cyan}{青色},\color{magenta}{品红},\color{purple}{紫色},\color{silver}{银色}\]</span></p><blockquote><p>颜色测试失败</p></blockquote><p><span class="math display">\[\large \underset{j=1}{\overset{\infty}{\LARGE \mathrm K}}\frac{a_j}{b_j}=\cfrac{a_1}{b_1+\cfrac{a_2}{b_2+\cfrac{a_3}{b_3+\cfrac{a_4}{b_4+\ddots}}}}\\\]</span></p><p><span class="math display">\[\large\cfrac{a_{1}}{b_{1}+\cfrac{a_{2}}{b_{2}+\cfrac{a_{3}}{b_{3}+\ddots }}}={\genfrac{}{}{}{}{a_1}{b_1}}  {\genfrac{}{}{0pt}{}{}{+}}   {\genfrac{}{}{}{}{a_2}{b_2}}   {\genfrac{}{}{0pt}{}{}{+}}   {\genfrac{}{}{}{}{a_3}{b_3}}   {\genfrac{}{}{0pt}{}{}{+\dots}}\\\]</span></p><h1 id="tags">tags</h1><div class="primary"><p>primary</p></div><div class="secondary"><blockquote><p>secondary</p></blockquote></div><div class="success"><blockquote><p>success</p></blockquote></div><div class="danger"><blockquote><p>danger</p></blockquote></div><div class="warning"><blockquote><p>warning</p></blockquote></div><div class="info"><blockquote><p>info</p></blockquote></div><div class="gray"><blockquote><p>gray</p></blockquote></div><div class="yellow"><blockquote><p>yellow</p></blockquote></div><h1 id="code">code</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">float64</span><span class="token punctuation">)</span>  ch <span class="token operator">&lt;-</span> <span class="token number">1.0e10</span>    <span class="token comment">// magic number</span>  x<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch  <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`exitting now\`</span><span class="token punctuation">)</span>  <span class="token keyword">go</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span><span class="token punctuation">&#125;</span></code></pre><details><summary>C++ —— The best language!</summary><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> i64 <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span> <span class="token comment">// &lt;+></span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" \n"</span><span class="token punctuation">[</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> tt<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>tt <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></details><h1 id="source-code">source code</h1><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml">title: test-md-formatpermalink: /blog/test-md-format/categories: testtags: testtoc: truemath: truedate: 2022-05-01 22:18:19updated: 2022-05-25 07:21:50</span><span class="token punctuation">---</span></span><span class="token title important"><span class="token punctuation">#</span> formula</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> This is a test for $\LaTeX$ and other formats.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>$$f(x) = x ^ 2$$$$\mathrm&#123;ABCDEabcde1234&#125;\\\mathit&#123;ABCDEabcde1234&#125;\\\mathbf&#123;ABCDEabcde1234&#125;\\\mathsf&#123;ABCDEabcde1234&#125;\\\mathtt&#123;ABCDEabcde1234&#125;\\\mathcal&#123;ABCDEFGHIJK&#125;\\\mathscr&#123;ABCDEFGHIJK&#125;\\\mathfrak&#123;ABCDEFGHIJK&#125;\\\mathbb&#123;ABCDEFGHIJK&#125;\\$$$$\large P = \frac&#123;\displaystyle&#123;\sum_&#123;i=1&#125;^n (x_i- x)(y_i- y)&#125;&#125;&#123;\displaystyle&#123;\left[\sum_&#123;i=1&#125;^n(x_i-x)^2\sum_&#123;i=1&#125;^n(y_i- y)^2\right]^&#123;1/2&#125;&#125;&#125;\\$$$$\color&#123;black&#125;&#123;黑色&#125;,\color&#123;red&#125;&#123;红色&#125;,\color&#123;green&#125;&#123;绿色&#125;,\color&#123;brown&#125;&#123;棕色&#125;,\color&#123;pink&#125;&#123;粉色&#125;\\\color&#123;white&#125;&#123;白色&#125;,\color&#123;blue&#125;&#123;蓝色&#125;,\color&#123;red&#125;&#123;红色&#125;,\color&#123;yellow&#125;&#123;黄色&#125;,\color&#123;gray&#125;&#123;灰色&#125;\\\color&#123;orange&#125;&#123;橘色&#125;,\color&#123;teal&#125;&#123;靛青&#125;,\color&#123;darkgray&#125;&#123;深灰&#125;,\color&#123;olive&#125;&#123;橄榄&#125;,\color&#123;violet&#125;&#123;紫罗兰&#125;\\\color&#123;lime&#125;&#123;青柠&#125;,\color&#123;lightgray&#125;&#123;淡灰&#125;,\color&#123;cyan&#125;&#123;青色&#125;,\color&#123;magenta&#125;&#123;品红&#125;,\color&#123;purple&#125;&#123;紫色&#125;,\color&#123;silver&#125;&#123;银色&#125;$$<span class="token blockquote punctuation">></span> 颜色测试失败$$\large \underset&#123;j=1&#125;&#123;\overset&#123;\infty&#125;&#123;\LARGE \mathrm K&#125;&#125;\frac&#123;a_j&#125;&#123;b_j&#125;=\cfrac&#123;a_1&#125;&#123;b_1+\cfrac&#123;a_2&#125;&#123;b_2+\cfrac&#123;a_3&#125;&#123;b_3+\cfrac&#123;a_4&#125;&#123;b_4+\ddots&#125;&#125;&#125;&#125;\\$$$$\large\cfrac&#123;a_&#123;1&#125;&#125;&#123;b_&#123;1&#125;+\cfrac&#123;a_&#123;2&#125;&#125;&#123;b_&#123;2&#125;+\cfrac&#123;a_&#123;3&#125;&#125;&#123;b_&#123;3&#125;+\ddots &#125;&#125;&#125;=&#123;\genfrac&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;a_1&#125;&#123;b_1&#125;&#125;  &#123;\genfrac&#123;&#125;&#123;&#125;&#123;0pt&#125;&#123;&#125;&#123;&#125;&#123;+&#125;&#125;   &#123;\genfrac&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;a_2&#125;&#123;b_2&#125;&#125;   &#123;\genfrac&#123;&#125;&#123;&#125;&#123;0pt&#125;&#123;&#125;&#123;&#125;&#123;+&#125;&#125;   &#123;\genfrac&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;a_3&#125;&#123;b_3&#125;&#125;   &#123;\genfrac&#123;&#125;&#123;&#125;&#123;0pt&#125;&#123;&#125;&#123;&#125;&#123;+\dots&#125;&#125;\\$$<span class="token title important"><span class="token punctuation">#</span> tags</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>primary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> secondary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> success<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> danger<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token blockquote punctuation">></span> warning<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token blockquote punctuation">></span> info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> gray<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> yellow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token title important"><span class="token punctuation">#</span> code</span><span class="token code"><span class="token punctuation">```</span><span class="token code-language">go</span><span class="token code-block language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">float64</span><span class="token punctuation">)</span>  ch <span class="token operator">&lt;-</span> <span class="token number">1.0e10</span>    <span class="token comment">// magic number</span>  x<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch  <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`exitting now\`</span><span class="token punctuation">)</span>  <span class="token keyword">go</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">```</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span> C++ —— The best language! <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span><span class="token code"><span class="token punctuation">```</span><span class="token code-language">cpp</span><span class="token code-block language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> i64 <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span> <span class="token comment">// &lt;+></span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" \n"</span><span class="token punctuation">[</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> tt<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>tt <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">```</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf773</title>
      <link href="//cf/773/"/>
      <url>//cf/773/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！你想看啥啊？😅" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="53a9409be6f05b1e7f20c235910a57705c73eeae09bc798e49ba34d3f5d1889a">2a8bb1d28c7f1269950a2b2147fcb6930080146db42b8326a04a2d133287df2fd4870f3be6d2b1c0f3bba6408de9868966803e9bc58901a425c9f8f4d41eeb867584cfe214254f69acd8fdcf1eaf700ec5a659ff7a6d841d9fc3b8854e6f8be2af84afdda78b88e12b12a1f16321ff87d04ca7d37bb437c23970b86d6ba91eda82fc5dadc88416f279476516bb4915c09bb4ee45110c8304c69f350e90e77392</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看 🍻。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> cf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
